# -*- coding: utf-8 -*-
"""glaucomaDataset.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1trqIzfTYBUwX1C8xAI5wccWKpd5LdG7D
"""

from __future__ import print_function, division
import os
import torch
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms, utils
from google.colab import files
import importlib_metadata
from skimage import io, transform, color

class GlaucomaDataset(Dataset):
    """Class that reat ORGIA dataset for Glaucoma classification."""

    def __init__(self, csv_file, root_dir, transform=None):
        """
        Args:
            csv_file (string): Path to the csv file with annotations.
            root_dir (string): Directory with all the images.
            transform (callable, optional): Optional transform to be applied
                on a sample.
        """
        self.glaucoma = pd.read_csv(csv_file).sample(frac=1) # when used in colab
        self.root_dir = root_dir
        self.transform = transform 

    def __len__(self):
        return len(self.glaucoma)

    def __getitem__(self, idx):
        if torch.is_tensor(idx):
            idx = idx.tolist()

        self.glaucoma = self.glaucoma.sample(frac=1)
        img_name = os.path.join(self.root_dir,
                                self.glaucoma.iloc[idx, 0])
        image = io.imread(img_name)
        labels = self.glaucoma.iloc[idx, -1] #[Done]
        sample = {'image': image, 'label': labels} #[Done]

        if self.transform:
            sample = self.transform(sample)

        return sample

class Rescale(object):
    """Rescale the image in a sample to a given size.

    Args:
        output_size (tuple or int): Desired output size. If tuple, output is
            matched to output_size. If int, smaller of image edges is matched
            to output_size keeping aspect ratio the same.
    """

    def __init__(self, output_size):
        assert isinstance(output_size, (int, tuple))
        self.output_size = output_size

    def __call__(self, sample):
        image, labels = sample['image'], sample['label']

        h, w = image.shape[:2]
        if isinstance(self.output_size, int):
            if h > w:
                #new_h, new_w = self.output_size * h / w, self.output_size
                new_h, new_w = self.output_size, self.output_size * w / h
            else:
                #new_h, new_w = self.output_size, self.output_size * w / h
                new_h, new_w = self.output_size * h / w, self.output_size
        else:
            new_h, new_w = self.output_size

        new_h, new_w = int(new_h), int(new_w)

        img = transform.resize(image, (new_h, new_w))

        if new_h > new_w:
            required_pad1 = (new_h - new_w)/2

            if required_pad1%2 != 0 and required_pad1%2 != 1:
              required_pad1 += 0.5
              required_pad2 = int(required_pad1 - 1)
            else:
              required_pad2 = int(required_pad1)
            
            required_pad1 = int(required_pad1)
            img = np.pad(img, ((0, 0),(required_pad1, required_pad2), (0, 0)), 'constant', constant_values=(0))
        elif new_w > new_h:
            required_pad1 = (new_w - new_h)/2
            if required_pad1%2 != 0 and required_pad1%2 != 1:
              required_pad1 += 0.5
              required_pad2 = int(required_pad1 - 1)
            else:
              required_pad2 = int(required_pad1)
            
            required_pad1 = int(required_pad1)
            img = np.pad(img, ((required_pad1, required_pad2),(0, 0), (0, 0)), 'constant', constant_values=(0))

        return {'image': img, 'label': labels}

class ToTensor(object):
    """Convert ndarrays in sample to Tensors."""

    def __call__(self, sample):
        image, labels = sample['image'], sample['label']

        # swap color axis because
        # numpy image: H x W x C
        # torch image: C x H x W
        image = image.transpose((2, 0, 1))
        return {'image': torch.from_numpy(image),
                'label': torch.Tensor([labels])}

class TakeChannel(object):
    """Separate channels of the image and choose one.

    Args:
        output_size (tuple or int): Desired output size. If tuple, output is
            matched to output_size. If int, smaller of image edges is matched
            to output_size keeping aspect ratio the same.
    """

    def __init__(self, channel):
        self.channel = channel

    def __call__(self, sample):
        image, labels = sample['image'], sample['label']
        h, w, c = image.shape

        if self.channel == 'red':
          img = image[:,:,0]
        elif self.channel == 'green':
          img = image[:,:,1]
        elif self.channel == 'blue':
          img = image[:,:,2]
        elif self.channel == 'hue':
          hsv_img = color.rgb2hsv(image)
          img = hsv_img[:,:,0]
        elif self.channel == 'saturation':
          hsv_img = color.rgb2hsv(image)
          img = hsv_img[:,:,1]
        elif self.channel == 'value':
          hsv_img = color.rgb2hsv(image)
          img = hsv_img[:,:,2]

        img = img.reshape((h, w, 1))

        return {'image': img, 'label': labels}